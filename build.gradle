buildscript {
    ext.kotlin_repository = {
        if (kotlin_version.endsWith('-SNAPSHOT')) return 'https://oss.sonatype.org/content/repositories/snapshots'
        return 'http://dl.bintray.com/kotlin/kotlin-dev'
    }()

    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        maven { url kotlin_repository }
        maven { url 'https://dl.bintray.com/jetbrains/kotlin-native-dependencies' }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintray_plugin_version"
        classpath 'net.researchgate:gradle-release:2.4.0'
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.jetbrains.kotlinx:atomicfu-gradle-plugin:$atomic_fu_version"
    }
}

ext.configuredVersion = project.hasProperty('releaseVersion') ? project.releaseVersion : project.version
ext.globalM2 = "$buildDir/m2"
ext.publishLocal = project.hasProperty('publishLocal')

apply from: 'gradle/platform.gradle'

allprojects {
    group = 'io.ktor'
    version = configuredVersion

    repositories {
        maven { url 'https://dl.bintray.com/kotlin/kotlinx/' }
        maven { url kotlin_repository }
        maven { url "https://dl.bintray.com/sandwwraith/libs-preview/" }
        jcenter()
    }

    apply plugin: "kotlin-multiplatform"

    kotlin {
        targets {
            fromPreset(presets.jvm, 'jvm')
            fromPreset(presets.iosArm32, 'iosArm32')
            fromPreset(presets.iosArm64, 'iosArm64')
            fromPreset(presets.iosX64, 'iosX64')
        }

        sourceSets {
            commonMain {
                kotlin.srcDir 'commonMain'
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-common', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-common', version: coroutines_version

                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-io', version: kotlinx_io_version)
//                            {
//                        exclude(module: 'kotlin-stdlib-common')
//                    }

                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io', version: kotlinx_io_version)
//                            {
//                        exclude(module: 'kotlin-stdlib-common')
//                    }

                }
            }
            commonTest {
                kotlin.srcDir 'commonTest'
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                    implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
                }
            }
            jvmMain {
                kotlin.srcDir 'jvmMain'
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-stdlib'
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk7', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jdk8', version: kotlin_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core', version: coroutines_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-jdk8', version: coroutines_version

                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-io-jvm', version: kotlinx_io_version)
//                            {
//                        exclude(module: 'kotlin-stdlib-jvm')
//                    }

                    implementation(group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-jvm', version: kotlinx_io_version)
//                            {
//                        exclude(module: 'kotlin-stdlib-jvm')
//                    }

                    api group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
                    api group: 'com.typesafe', name: 'config', version: '1.3.1'
                }
            }
            jvmTest {
                kotlin.srcDir 'jvmTest'
                dependencies {
                    implementation 'org.jetbrains.kotlin:kotlin-test'
                    implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                    implementation "junit:junit:$junit_version"

                    implementation group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlin_version
                    implementation group: 'junit', name: 'junit', version: junit_version
                }
            }
            nativeMain {
                kotlin.srcDir 'nativeMain'
                dependencies {
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-core-native', version: coroutines_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-io-native', version: kotlinx_io_version
                    implementation group: 'org.jetbrains.kotlinx', name: 'kotlinx-coroutines-io-native', version: kotlinx_io_version
                }
            }
            configure([iosArm32Main, iosArm64Main, iosX64Main]) {
                dependsOn nativeMain
            }
        }

    }
//    apply from: rootProject.file('gradle/publish.gradle')

//    if (project.parent != null && project.parent.name == 'ktor-server') {
//        apply from: rootProject.file('gradle/engines.gradle')
//    }
//
//    task sourceJar(type: Jar, dependsOn: classes) {
//        classifier 'sources'
//        from sourceSets.main.kotlin
//        duplicatesStrategy DuplicatesStrategy.EXCLUDE
//        def platformSrc = sourceSets.main.allSource
//        def commonSrc = rootProject.sourceSets.main.allSource
//        from(platformSrc + commonSrc)
//    }
//
//    task emptyJar(type: Jar) {
//        classifier 'javadoc'
//    }
//
//    tasks.build.dependsOn(['sourceJar', 'emptyJar'])
}
//
//release {
//    scmAdapters = [net.researchgate.release.GitAdapter]
//    git {
//        requireBranch = 'gradle-build'
//    }
//}
//
//afterReleaseBuild.dependsOn bintrayUpload
